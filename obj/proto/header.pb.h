// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef PROTOBUF_INCLUDED_header_2eproto
#define PROTOBUF_INCLUDED_header_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scalar.pb.h"
#include "action.pb.h"
#include "start_app.pb.h"
#include "cluster_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_header_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_header_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_header_2eproto();
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
namespace google {
namespace protobuf {
template<> ::Header* Arena::CreateMaybeMessage<::Header>(Arena*);
template<> ::Msg* Arena::CreateMaybeMessage<::Msg>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Header_Type {
  Header_Type_RPC = 1,
  Header_Type_CALLBACK = 2,
  Header_Type_ACK = 3,
  Header_Type_DATA = 4,
  Header_Type_SYSTEM = 5,
  Header_Type_TEST = 6
};
bool Header_Type_IsValid(int value);
const Header_Type Header_Type_Type_MIN = Header_Type_RPC;
const Header_Type Header_Type_Type_MAX = Header_Type_TEST;
const int Header_Type_Type_ARRAYSIZE = Header_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Type_descriptor();
inline const ::std::string& Header_Type_Name(Header_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Type_descriptor(), value);
}
inline bool Header_Type_Parse(
    const ::std::string& name, Header_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Type>(
    Header_Type_descriptor(), name, value);
}
enum Header_Priority {
  Header_Priority_LOW = 0,
  Header_Priority_HIGH = 1
};
bool Header_Priority_IsValid(int value);
const Header_Priority Header_Priority_Priority_MIN = Header_Priority_LOW;
const Header_Priority Header_Priority_Priority_MAX = Header_Priority_HIGH;
const int Header_Priority_Priority_ARRAYSIZE = Header_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Priority_descriptor();
inline const ::std::string& Header_Priority_Name(Header_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Priority_descriptor(), value);
}
inline bool Header_Priority_Parse(
    const ::std::string& name, Header_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Priority>(
    Header_Priority_descriptor(), name, value);
}
// ===================================================================

class Header :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Header_Type Type;
  static const Type RPC =
    Header_Type_RPC;
  static const Type CALLBACK =
    Header_Type_CALLBACK;
  static const Type ACK =
    Header_Type_ACK;
  static const Type DATA =
    Header_Type_DATA;
  static const Type SYSTEM =
    Header_Type_SYSTEM;
  static const Type TEST =
    Header_Type_TEST;
  static inline bool Type_IsValid(int value) {
    return Header_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Header_Type_Type_MIN;
  static const Type Type_MAX =
    Header_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Header_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Header_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Header_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Header_Type_Parse(name, value);
  }

  typedef Header_Priority Priority;
  static const Priority LOW =
    Header_Priority_LOW;
  static const Priority HIGH =
    Header_Priority_HIGH;
  static inline bool Priority_IsValid(int value) {
    return Header_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    Header_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    Header_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    Header_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return Header_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return Header_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return Header_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string split_string_from = 15;
  int split_string_from_size() const;
  void clear_split_string_from();
  static const int kSplitStringFromFieldNumber = 15;
  const ::std::string& split_string_from(int index) const;
  ::std::string* mutable_split_string_from(int index);
  void set_split_string_from(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_split_string_from(int index, ::std::string&& value);
  #endif
  void set_split_string_from(int index, const char* value);
  void set_split_string_from(int index, const char* value, size_t size);
  ::std::string* add_split_string_from();
  void add_split_string_from(const ::std::string& value);
  #if LANG_CXX11
  void add_split_string_from(::std::string&& value);
  #endif
  void add_split_string_from(const char* value);
  void add_split_string_from(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& split_string_from() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_split_string_from();

  // repeated string split_string_to = 17;
  int split_string_to_size() const;
  void clear_split_string_to();
  static const int kSplitStringToFieldNumber = 17;
  const ::std::string& split_string_to(int index) const;
  ::std::string* mutable_split_string_to(int index);
  void set_split_string_to(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_split_string_to(int index, ::std::string&& value);
  #endif
  void set_split_string_to(int index, const char* value);
  void set_split_string_to(int index, const char* value, size_t size);
  ::std::string* add_split_string_to();
  void add_split_string_to(const ::std::string& value);
  #if LANG_CXX11
  void add_split_string_to(::std::string&& value);
  #endif
  void add_split_string_to(const char* value);
  void add_split_string_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& split_string_to() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_split_string_to();

  // repeated string metadatentry = 20;
  int metadatentry_size() const;
  void clear_metadatentry();
  static const int kMetadatentryFieldNumber = 20;
  const ::std::string& metadatentry(int index) const;
  ::std::string* mutable_metadatentry(int index);
  void set_metadatentry(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_metadatentry(int index, ::std::string&& value);
  #endif
  void set_metadatentry(int index, const char* value);
  void set_metadatentry(int index, const char* value, size_t size);
  ::std::string* add_metadatentry();
  void add_metadatentry(const ::std::string& value);
  #if LANG_CXX11
  void add_metadatentry(::std::string&& value);
  #endif
  void add_metadatentry(const char* value);
  void add_metadatentry(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& metadatentry() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_metadatentry();

  // repeated bool misc_bool = 41;
  int misc_bool_size() const;
  void clear_misc_bool();
  static const int kMiscBoolFieldNumber = 41;
  bool misc_bool(int index) const;
  void set_misc_bool(int index, bool value);
  void add_misc_bool(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      misc_bool() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_misc_bool();

  // repeated uint64 misc_int = 42;
  int misc_int_size() const;
  void clear_misc_int();
  static const int kMiscIntFieldNumber = 42;
  ::google::protobuf::uint64 misc_int(int index) const;
  void set_misc_int(int index, ::google::protobuf::uint64 value);
  void add_misc_int(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      misc_int() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_misc_int();

  // repeated bytes misc_string = 43;
  int misc_string_size() const;
  void clear_misc_string();
  static const int kMiscStringFieldNumber = 43;
  const ::std::string& misc_string(int index) const;
  ::std::string* mutable_misc_string(int index);
  void set_misc_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_misc_string(int index, ::std::string&& value);
  #endif
  void set_misc_string(int index, const char* value);
  void set_misc_string(int index, const void* value, size_t size);
  ::std::string* add_misc_string();
  void add_misc_string(const ::std::string& value);
  #if LANG_CXX11
  void add_misc_string(::std::string&& value);
  #endif
  void add_misc_string(const char* value);
  void add_misc_string(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& misc_string() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_misc_string();

  // repeated double misc_double = 44;
  int misc_double_size() const;
  void clear_misc_double();
  static const int kMiscDoubleFieldNumber = 44;
  double misc_double(int index) const;
  void set_misc_double(int index, double value);
  void add_misc_double(double value);
  const ::google::protobuf::RepeatedField< double >&
      misc_double() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_misc_double();

  // repeated .Scalar misc_scalar = 45;
  int misc_scalar_size() const;
  void clear_misc_scalar();
  static const int kMiscScalarFieldNumber = 45;
  ::Scalar* mutable_misc_scalar(int index);
  ::google::protobuf::RepeatedPtrField< ::Scalar >*
      mutable_misc_scalar();
  const ::Scalar& misc_scalar(int index) const;
  ::Scalar* add_misc_scalar();
  const ::google::protobuf::RepeatedPtrField< ::Scalar >&
      misc_scalar() const;

  // optional string app = 5;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 5;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // optional string rpc = 6;
  bool has_rpc() const;
  void clear_rpc();
  static const int kRpcFieldNumber = 6;
  const ::std::string& rpc() const;
  void set_rpc(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc(::std::string&& value);
  #endif
  void set_rpc(const char* value);
  void set_rpc(const char* value, size_t size);
  ::std::string* mutable_rpc();
  ::std::string* release_rpc();
  void set_allocated_rpc(::std::string* rpc);

  // optional string callback_app = 21;
  bool has_callback_app() const;
  void clear_callback_app();
  static const int kCallbackAppFieldNumber = 21;
  const ::std::string& callback_app() const;
  void set_callback_app(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_app(::std::string&& value);
  #endif
  void set_callback_app(const char* value);
  void set_callback_app(const char* value, size_t size);
  ::std::string* mutable_callback_app();
  ::std::string* release_callback_app();
  void set_allocated_callback_app(::std::string* callback_app);

  // optional string callback_rpc = 22;
  bool has_callback_rpc() const;
  void clear_callback_rpc();
  static const int kCallbackRpcFieldNumber = 22;
  const ::std::string& callback_rpc() const;
  void set_callback_rpc(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_rpc(::std::string&& value);
  #endif
  void set_callback_rpc(const char* value);
  void set_callback_rpc(const char* value, size_t size);
  ::std::string* mutable_callback_rpc();
  ::std::string* release_callback_rpc();
  void set_allocated_callback_rpc(::std::string* callback_rpc);

  // optional string data_channel = 32;
  bool has_data_channel() const;
  void clear_data_channel();
  static const int kDataChannelFieldNumber = 32;
  const ::std::string& data_channel() const;
  void set_data_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_data_channel(::std::string&& value);
  #endif
  void set_data_channel(const char* value);
  void set_data_channel(const char* value, size_t size);
  ::std::string* mutable_data_channel();
  ::std::string* release_data_channel();
  void set_allocated_data_channel(::std::string* data_channel);

  // optional string external_host = 51;
  bool has_external_host() const;
  void clear_external_host();
  static const int kExternalHostFieldNumber = 51;
  const ::std::string& external_host() const;
  void set_external_host(const ::std::string& value);
  #if LANG_CXX11
  void set_external_host(::std::string&& value);
  #endif
  void set_external_host(const char* value);
  void set_external_host(const char* value, size_t size);
  ::std::string* mutable_external_host();
  ::std::string* release_external_host();
  void set_allocated_external_host(::std::string* external_host);

  // optional uint64 flag = 1;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::uint64 flag() const;
  void set_flag(::google::protobuf::uint64 value);

  // required uint64 from = 2;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 2;
  ::google::protobuf::uint64 from() const;
  void set_from(::google::protobuf::uint64 value);

  // required uint64 to = 3;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  ::google::protobuf::uint64 to() const;
  void set_to(::google::protobuf::uint64 value);

  // optional uint64 from_length = 14;
  bool has_from_length() const;
  void clear_from_length();
  static const int kFromLengthFieldNumber = 14;
  ::google::protobuf::uint64 from_length() const;
  void set_from_length(::google::protobuf::uint64 value);

  // optional uint64 to_length = 16;
  bool has_to_length() const;
  void clear_to_length();
  static const int kToLengthFieldNumber = 16;
  ::google::protobuf::uint64 to_length() const;
  void set_to_length(::google::protobuf::uint64 value);

  // optional uint64 depth = 18;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 18;
  ::google::protobuf::uint64 depth() const;
  void set_depth(::google::protobuf::uint64 value);

  // optional fixed64 ack_counter = 23;
  bool has_ack_counter() const;
  void clear_ack_counter();
  static const int kAckCounterFieldNumber = 23;
  ::google::protobuf::uint64 ack_counter() const;
  void set_ack_counter(::google::protobuf::uint64 value);

  // optional fixed64 data_ptr = 31;
  bool has_data_ptr() const;
  void clear_data_ptr();
  static const int kDataPtrFieldNumber = 31;
  ::google::protobuf::uint64 data_ptr() const;
  void set_data_ptr(::google::protobuf::uint64 value);

  // optional fixed32 uid = 19;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 19;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional int32 external_port = 52;
  bool has_external_port() const;
  void clear_external_port();
  static const int kExternalPortFieldNumber = 52;
  ::google::protobuf::int32 external_port() const;
  void set_external_port(::google::protobuf::int32 value);

  // required .Header.Type type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::Header_Type type() const;
  void set_type(::Header_Type value);

  // optional .Header.Priority priority = 13 [default = HIGH];
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 13;
  ::Header_Priority priority() const;
  void set_priority(::Header_Priority value);

  // @@protoc_insertion_point(class_scope:Header)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> split_string_from_;
  ::google::protobuf::RepeatedPtrField<::std::string> split_string_to_;
  ::google::protobuf::RepeatedPtrField<::std::string> metadatentry_;
  ::google::protobuf::RepeatedField< bool > misc_bool_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > misc_int_;
  ::google::protobuf::RepeatedPtrField<::std::string> misc_string_;
  ::google::protobuf::RepeatedField< double > misc_double_;
  ::google::protobuf::RepeatedPtrField< ::Scalar > misc_scalar_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::google::protobuf::internal::ArenaStringPtr rpc_;
  ::google::protobuf::internal::ArenaStringPtr callback_app_;
  ::google::protobuf::internal::ArenaStringPtr callback_rpc_;
  ::google::protobuf::internal::ArenaStringPtr data_channel_;
  ::google::protobuf::internal::ArenaStringPtr external_host_;
  ::google::protobuf::uint64 flag_;
  ::google::protobuf::uint64 from_;
  ::google::protobuf::uint64 to_;
  ::google::protobuf::uint64 from_length_;
  ::google::protobuf::uint64 to_length_;
  ::google::protobuf::uint64 depth_;
  ::google::protobuf::uint64 ack_counter_;
  ::google::protobuf::uint64 data_ptr_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 external_port_;
  int type_;
  int priority_;
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class Msg :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Msg) */ {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(Msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Msg* other);
  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return CreateMaybeMessage<Msg>(nullptr);
  }

  Msg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Header& header() const;
  ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);

  // optional .Action action = 3;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 3;
  const ::Action& action() const;
  ::Action* release_action();
  ::Action* mutable_action();
  void set_allocated_action(::Action* action);

  // optional .ActionBatch action_batch = 4;
  bool has_action_batch() const;
  void clear_action_batch();
  static const int kActionBatchFieldNumber = 4;
  const ::ActionBatch& action_batch() const;
  ::ActionBatch* release_action_batch();
  ::ActionBatch* mutable_action_batch();
  void set_allocated_action_batch(::ActionBatch* action_batch);

  // optional .StartAppProto startappproto = 5;
  bool has_startappproto() const;
  void clear_startappproto();
  static const int kStartappprotoFieldNumber = 5;
  const ::StartAppProto& startappproto() const;
  ::StartAppProto* release_startappproto();
  ::StartAppProto* mutable_startappproto();
  void set_allocated_startappproto(::StartAppProto* startappproto);

  // required uint64 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Msg)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Header* header_;
  ::Action* action_;
  ::ActionBatch* action_batch_;
  ::StartAppProto* startappproto_;
  ::google::protobuf::uint64 type_;
  friend struct ::TableStruct_header_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// optional uint64 flag = 1;
inline bool Header::has_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Header::clear_flag() {
  flag_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 Header::flag() const {
  // @@protoc_insertion_point(field_get:Header.flag)
  return flag_;
}
inline void Header::set_flag(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  flag_ = value;
  // @@protoc_insertion_point(field_set:Header.flag)
}

// required uint64 from = 2;
inline bool Header::has_from() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Header::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 Header::from() const {
  // @@protoc_insertion_point(field_get:Header.from)
  return from_;
}
inline void Header::set_from(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  from_ = value;
  // @@protoc_insertion_point(field_set:Header.from)
}

// required uint64 to = 3;
inline bool Header::has_to() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Header::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint64 Header::to() const {
  // @@protoc_insertion_point(field_get:Header.to)
  return to_;
}
inline void Header::set_to(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  to_ = value;
  // @@protoc_insertion_point(field_set:Header.to)
}

// required .Header.Type type = 4;
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Header::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::Header_Type Header::type() const {
  // @@protoc_insertion_point(field_get:Header.type)
  return static_cast< ::Header_Type >(type_);
}
inline void Header::set_type(::Header_Type value) {
  assert(::Header_Type_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Header.type)
}

// optional string app = 5;
inline bool Header::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Header::app() const {
  // @@protoc_insertion_point(field_get:Header.app)
  return app_.GetNoArena();
}
inline void Header::set_app(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.app)
}
#if LANG_CXX11
inline void Header::set_app(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.app)
}
#endif
inline void Header::set_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.app)
}
inline void Header::set_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.app)
}
inline ::std::string* Header::mutable_app() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Header.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_app() {
  // @@protoc_insertion_point(field_release:Header.app)
  if (!has_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_app(::std::string* app) {
  if (app != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:Header.app)
}

// optional string rpc = 6;
inline bool Header::has_rpc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::clear_rpc() {
  rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Header::rpc() const {
  // @@protoc_insertion_point(field_get:Header.rpc)
  return rpc_.GetNoArena();
}
inline void Header::set_rpc(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.rpc)
}
#if LANG_CXX11
inline void Header::set_rpc(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.rpc)
}
#endif
inline void Header::set_rpc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.rpc)
}
inline void Header::set_rpc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.rpc)
}
inline ::std::string* Header::mutable_rpc() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Header.rpc)
  return rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_rpc() {
  // @@protoc_insertion_point(field_release:Header.rpc)
  if (!has_rpc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rpc_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_rpc(::std::string* rpc) {
  if (rpc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc);
  // @@protoc_insertion_point(field_set_allocated:Header.rpc)
}

// optional .Header.Priority priority = 13 [default = HIGH];
inline bool Header::has_priority() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Header::clear_priority() {
  priority_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::Header_Priority Header::priority() const {
  // @@protoc_insertion_point(field_get:Header.priority)
  return static_cast< ::Header_Priority >(priority_);
}
inline void Header::set_priority(::Header_Priority value) {
  assert(::Header_Priority_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:Header.priority)
}

// optional uint64 from_length = 14;
inline bool Header::has_from_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Header::clear_from_length() {
  from_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint64 Header::from_length() const {
  // @@protoc_insertion_point(field_get:Header.from_length)
  return from_length_;
}
inline void Header::set_from_length(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  from_length_ = value;
  // @@protoc_insertion_point(field_set:Header.from_length)
}

// repeated string split_string_from = 15;
inline int Header::split_string_from_size() const {
  return split_string_from_.size();
}
inline void Header::clear_split_string_from() {
  split_string_from_.Clear();
}
inline const ::std::string& Header::split_string_from(int index) const {
  // @@protoc_insertion_point(field_get:Header.split_string_from)
  return split_string_from_.Get(index);
}
inline ::std::string* Header::mutable_split_string_from(int index) {
  // @@protoc_insertion_point(field_mutable:Header.split_string_from)
  return split_string_from_.Mutable(index);
}
inline void Header::set_split_string_from(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Header.split_string_from)
  split_string_from_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Header::set_split_string_from(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Header.split_string_from)
  split_string_from_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Header::set_split_string_from(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_string_from_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Header.split_string_from)
}
inline void Header::set_split_string_from(int index, const char* value, size_t size) {
  split_string_from_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Header.split_string_from)
}
inline ::std::string* Header::add_split_string_from() {
  // @@protoc_insertion_point(field_add_mutable:Header.split_string_from)
  return split_string_from_.Add();
}
inline void Header::add_split_string_from(const ::std::string& value) {
  split_string_from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Header.split_string_from)
}
#if LANG_CXX11
inline void Header::add_split_string_from(::std::string&& value) {
  split_string_from_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Header.split_string_from)
}
#endif
inline void Header::add_split_string_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_string_from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Header.split_string_from)
}
inline void Header::add_split_string_from(const char* value, size_t size) {
  split_string_from_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Header.split_string_from)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Header::split_string_from() const {
  // @@protoc_insertion_point(field_list:Header.split_string_from)
  return split_string_from_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Header::mutable_split_string_from() {
  // @@protoc_insertion_point(field_mutable_list:Header.split_string_from)
  return &split_string_from_;
}

// optional uint64 to_length = 16;
inline bool Header::has_to_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Header::clear_to_length() {
  to_length_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint64 Header::to_length() const {
  // @@protoc_insertion_point(field_get:Header.to_length)
  return to_length_;
}
inline void Header::set_to_length(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  to_length_ = value;
  // @@protoc_insertion_point(field_set:Header.to_length)
}

// repeated string split_string_to = 17;
inline int Header::split_string_to_size() const {
  return split_string_to_.size();
}
inline void Header::clear_split_string_to() {
  split_string_to_.Clear();
}
inline const ::std::string& Header::split_string_to(int index) const {
  // @@protoc_insertion_point(field_get:Header.split_string_to)
  return split_string_to_.Get(index);
}
inline ::std::string* Header::mutable_split_string_to(int index) {
  // @@protoc_insertion_point(field_mutable:Header.split_string_to)
  return split_string_to_.Mutable(index);
}
inline void Header::set_split_string_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Header.split_string_to)
  split_string_to_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Header::set_split_string_to(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Header.split_string_to)
  split_string_to_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Header::set_split_string_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_string_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Header.split_string_to)
}
inline void Header::set_split_string_to(int index, const char* value, size_t size) {
  split_string_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Header.split_string_to)
}
inline ::std::string* Header::add_split_string_to() {
  // @@protoc_insertion_point(field_add_mutable:Header.split_string_to)
  return split_string_to_.Add();
}
inline void Header::add_split_string_to(const ::std::string& value) {
  split_string_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Header.split_string_to)
}
#if LANG_CXX11
inline void Header::add_split_string_to(::std::string&& value) {
  split_string_to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Header.split_string_to)
}
#endif
inline void Header::add_split_string_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_string_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Header.split_string_to)
}
inline void Header::add_split_string_to(const char* value, size_t size) {
  split_string_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Header.split_string_to)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Header::split_string_to() const {
  // @@protoc_insertion_point(field_list:Header.split_string_to)
  return split_string_to_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Header::mutable_split_string_to() {
  // @@protoc_insertion_point(field_mutable_list:Header.split_string_to)
  return &split_string_to_;
}

// optional uint64 depth = 18;
inline bool Header::has_depth() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Header::clear_depth() {
  depth_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint64 Header::depth() const {
  // @@protoc_insertion_point(field_get:Header.depth)
  return depth_;
}
inline void Header::set_depth(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  depth_ = value;
  // @@protoc_insertion_point(field_set:Header.depth)
}

// optional fixed32 uid = 19;
inline bool Header::has_uid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Header::clear_uid() {
  uid_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 Header::uid() const {
  // @@protoc_insertion_point(field_get:Header.uid)
  return uid_;
}
inline void Header::set_uid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:Header.uid)
}

// repeated string metadatentry = 20;
inline int Header::metadatentry_size() const {
  return metadatentry_.size();
}
inline void Header::clear_metadatentry() {
  metadatentry_.Clear();
}
inline const ::std::string& Header::metadatentry(int index) const {
  // @@protoc_insertion_point(field_get:Header.metadatentry)
  return metadatentry_.Get(index);
}
inline ::std::string* Header::mutable_metadatentry(int index) {
  // @@protoc_insertion_point(field_mutable:Header.metadatentry)
  return metadatentry_.Mutable(index);
}
inline void Header::set_metadatentry(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Header.metadatentry)
  metadatentry_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Header::set_metadatentry(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Header.metadatentry)
  metadatentry_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Header::set_metadatentry(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadatentry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Header.metadatentry)
}
inline void Header::set_metadatentry(int index, const char* value, size_t size) {
  metadatentry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Header.metadatentry)
}
inline ::std::string* Header::add_metadatentry() {
  // @@protoc_insertion_point(field_add_mutable:Header.metadatentry)
  return metadatentry_.Add();
}
inline void Header::add_metadatentry(const ::std::string& value) {
  metadatentry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Header.metadatentry)
}
#if LANG_CXX11
inline void Header::add_metadatentry(::std::string&& value) {
  metadatentry_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Header.metadatentry)
}
#endif
inline void Header::add_metadatentry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadatentry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Header.metadatentry)
}
inline void Header::add_metadatentry(const char* value, size_t size) {
  metadatentry_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Header.metadatentry)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Header::metadatentry() const {
  // @@protoc_insertion_point(field_list:Header.metadatentry)
  return metadatentry_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Header::mutable_metadatentry() {
  // @@protoc_insertion_point(field_mutable_list:Header.metadatentry)
  return &metadatentry_;
}

// optional string callback_app = 21;
inline bool Header::has_callback_app() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::clear_callback_app() {
  callback_app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Header::callback_app() const {
  // @@protoc_insertion_point(field_get:Header.callback_app)
  return callback_app_.GetNoArena();
}
inline void Header::set_callback_app(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.callback_app)
}
#if LANG_CXX11
inline void Header::set_callback_app(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  callback_app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.callback_app)
}
#endif
inline void Header::set_callback_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.callback_app)
}
inline void Header::set_callback_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  callback_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.callback_app)
}
inline ::std::string* Header::mutable_callback_app() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Header.callback_app)
  return callback_app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_callback_app() {
  // @@protoc_insertion_point(field_release:Header.callback_app)
  if (!has_callback_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return callback_app_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_callback_app(::std::string* callback_app) {
  if (callback_app != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  callback_app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_app);
  // @@protoc_insertion_point(field_set_allocated:Header.callback_app)
}

// optional string callback_rpc = 22;
inline bool Header::has_callback_rpc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::clear_callback_rpc() {
  callback_rpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& Header::callback_rpc() const {
  // @@protoc_insertion_point(field_get:Header.callback_rpc)
  return callback_rpc_.GetNoArena();
}
inline void Header::set_callback_rpc(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.callback_rpc)
}
#if LANG_CXX11
inline void Header::set_callback_rpc(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  callback_rpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.callback_rpc)
}
#endif
inline void Header::set_callback_rpc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.callback_rpc)
}
inline void Header::set_callback_rpc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  callback_rpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.callback_rpc)
}
inline ::std::string* Header::mutable_callback_rpc() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:Header.callback_rpc)
  return callback_rpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_callback_rpc() {
  // @@protoc_insertion_point(field_release:Header.callback_rpc)
  if (!has_callback_rpc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return callback_rpc_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_callback_rpc(::std::string* callback_rpc) {
  if (callback_rpc != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  callback_rpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_rpc);
  // @@protoc_insertion_point(field_set_allocated:Header.callback_rpc)
}

// optional fixed64 ack_counter = 23;
inline bool Header::has_ack_counter() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Header::clear_ack_counter() {
  ack_counter_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint64 Header::ack_counter() const {
  // @@protoc_insertion_point(field_get:Header.ack_counter)
  return ack_counter_;
}
inline void Header::set_ack_counter(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  ack_counter_ = value;
  // @@protoc_insertion_point(field_set:Header.ack_counter)
}

// optional fixed64 data_ptr = 31;
inline bool Header::has_data_ptr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Header::clear_data_ptr() {
  data_ptr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint64 Header::data_ptr() const {
  // @@protoc_insertion_point(field_get:Header.data_ptr)
  return data_ptr_;
}
inline void Header::set_data_ptr(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  data_ptr_ = value;
  // @@protoc_insertion_point(field_set:Header.data_ptr)
}

// optional string data_channel = 32;
inline bool Header::has_data_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::clear_data_channel() {
  data_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& Header::data_channel() const {
  // @@protoc_insertion_point(field_get:Header.data_channel)
  return data_channel_.GetNoArena();
}
inline void Header::set_data_channel(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.data_channel)
}
#if LANG_CXX11
inline void Header::set_data_channel(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  data_channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.data_channel)
}
#endif
inline void Header::set_data_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.data_channel)
}
inline void Header::set_data_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  data_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.data_channel)
}
inline ::std::string* Header::mutable_data_channel() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:Header.data_channel)
  return data_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_data_channel() {
  // @@protoc_insertion_point(field_release:Header.data_channel)
  if (!has_data_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return data_channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_data_channel(::std::string* data_channel) {
  if (data_channel != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_channel);
  // @@protoc_insertion_point(field_set_allocated:Header.data_channel)
}

// repeated bool misc_bool = 41;
inline int Header::misc_bool_size() const {
  return misc_bool_.size();
}
inline void Header::clear_misc_bool() {
  misc_bool_.Clear();
}
inline bool Header::misc_bool(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_bool)
  return misc_bool_.Get(index);
}
inline void Header::set_misc_bool(int index, bool value) {
  misc_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_bool)
}
inline void Header::add_misc_bool(bool value) {
  misc_bool_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_bool)
}
inline const ::google::protobuf::RepeatedField< bool >&
Header::misc_bool() const {
  // @@protoc_insertion_point(field_list:Header.misc_bool)
  return misc_bool_;
}
inline ::google::protobuf::RepeatedField< bool >*
Header::mutable_misc_bool() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_bool)
  return &misc_bool_;
}

// repeated uint64 misc_int = 42;
inline int Header::misc_int_size() const {
  return misc_int_.size();
}
inline void Header::clear_misc_int() {
  misc_int_.Clear();
}
inline ::google::protobuf::uint64 Header::misc_int(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_int)
  return misc_int_.Get(index);
}
inline void Header::set_misc_int(int index, ::google::protobuf::uint64 value) {
  misc_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_int)
}
inline void Header::add_misc_int(::google::protobuf::uint64 value) {
  misc_int_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_int)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Header::misc_int() const {
  // @@protoc_insertion_point(field_list:Header.misc_int)
  return misc_int_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Header::mutable_misc_int() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_int)
  return &misc_int_;
}

// repeated bytes misc_string = 43;
inline int Header::misc_string_size() const {
  return misc_string_.size();
}
inline void Header::clear_misc_string() {
  misc_string_.Clear();
}
inline const ::std::string& Header::misc_string(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_string)
  return misc_string_.Get(index);
}
inline ::std::string* Header::mutable_misc_string(int index) {
  // @@protoc_insertion_point(field_mutable:Header.misc_string)
  return misc_string_.Mutable(index);
}
inline void Header::set_misc_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Header.misc_string)
  misc_string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Header::set_misc_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Header.misc_string)
  misc_string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Header::set_misc_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  misc_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Header.misc_string)
}
inline void Header::set_misc_string(int index, const void* value, size_t size) {
  misc_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Header.misc_string)
}
inline ::std::string* Header::add_misc_string() {
  // @@protoc_insertion_point(field_add_mutable:Header.misc_string)
  return misc_string_.Add();
}
inline void Header::add_misc_string(const ::std::string& value) {
  misc_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Header.misc_string)
}
#if LANG_CXX11
inline void Header::add_misc_string(::std::string&& value) {
  misc_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Header.misc_string)
}
#endif
inline void Header::add_misc_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  misc_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Header.misc_string)
}
inline void Header::add_misc_string(const void* value, size_t size) {
  misc_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Header.misc_string)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Header::misc_string() const {
  // @@protoc_insertion_point(field_list:Header.misc_string)
  return misc_string_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Header::mutable_misc_string() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_string)
  return &misc_string_;
}

// repeated double misc_double = 44;
inline int Header::misc_double_size() const {
  return misc_double_.size();
}
inline void Header::clear_misc_double() {
  misc_double_.Clear();
}
inline double Header::misc_double(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_double)
  return misc_double_.Get(index);
}
inline void Header::set_misc_double(int index, double value) {
  misc_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:Header.misc_double)
}
inline void Header::add_misc_double(double value) {
  misc_double_.Add(value);
  // @@protoc_insertion_point(field_add:Header.misc_double)
}
inline const ::google::protobuf::RepeatedField< double >&
Header::misc_double() const {
  // @@protoc_insertion_point(field_list:Header.misc_double)
  return misc_double_;
}
inline ::google::protobuf::RepeatedField< double >*
Header::mutable_misc_double() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_double)
  return &misc_double_;
}

// repeated .Scalar misc_scalar = 45;
inline int Header::misc_scalar_size() const {
  return misc_scalar_.size();
}
inline ::Scalar* Header::mutable_misc_scalar(int index) {
  // @@protoc_insertion_point(field_mutable:Header.misc_scalar)
  return misc_scalar_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Scalar >*
Header::mutable_misc_scalar() {
  // @@protoc_insertion_point(field_mutable_list:Header.misc_scalar)
  return &misc_scalar_;
}
inline const ::Scalar& Header::misc_scalar(int index) const {
  // @@protoc_insertion_point(field_get:Header.misc_scalar)
  return misc_scalar_.Get(index);
}
inline ::Scalar* Header::add_misc_scalar() {
  // @@protoc_insertion_point(field_add:Header.misc_scalar)
  return misc_scalar_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Scalar >&
Header::misc_scalar() const {
  // @@protoc_insertion_point(field_list:Header.misc_scalar)
  return misc_scalar_;
}

// optional string external_host = 51;
inline bool Header::has_external_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::clear_external_host() {
  external_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& Header::external_host() const {
  // @@protoc_insertion_point(field_get:Header.external_host)
  return external_host_.GetNoArena();
}
inline void Header::set_external_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.external_host)
}
#if LANG_CXX11
inline void Header::set_external_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  external_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Header.external_host)
}
#endif
inline void Header::set_external_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.external_host)
}
inline void Header::set_external_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  external_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.external_host)
}
inline ::std::string* Header::mutable_external_host() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:Header.external_host)
  return external_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_external_host() {
  // @@protoc_insertion_point(field_release:Header.external_host)
  if (!has_external_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return external_host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_external_host(::std::string* external_host) {
  if (external_host != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  external_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_host);
  // @@protoc_insertion_point(field_set_allocated:Header.external_host)
}

// optional int32 external_port = 52;
inline bool Header::has_external_port() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Header::clear_external_port() {
  external_port_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::int32 Header::external_port() const {
  // @@protoc_insertion_point(field_get:Header.external_port)
  return external_port_;
}
inline void Header::set_external_port(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  external_port_ = value;
  // @@protoc_insertion_point(field_set:Header.external_port)
}

// -------------------------------------------------------------------

// Msg

// required .Header header = 1;
inline bool Msg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Header& Msg::header() const {
  const ::Header* p = header_;
  // @@protoc_insertion_point(field_get:Msg.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Header*>(
      &::_Header_default_instance_);
}
inline ::Header* Msg::release_header() {
  // @@protoc_insertion_point(field_release:Msg.header)
  _has_bits_[0] &= ~0x00000001u;
  ::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Header* Msg::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.header)
  return header_;
}
inline void Msg::set_allocated_header(::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Msg.header)
}

// required uint64 type = 2;
inline bool Msg::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg::clear_type() {
  type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 Msg::type() const {
  // @@protoc_insertion_point(field_get:Msg.type)
  return type_;
}
inline void Msg::set_type(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.type)
}

// optional .Action action = 3;
inline bool Msg::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::Action& Msg::action() const {
  const ::Action* p = action_;
  // @@protoc_insertion_point(field_get:Msg.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::Action*>(
      &::_Action_default_instance_);
}
inline ::Action* Msg::release_action() {
  // @@protoc_insertion_point(field_release:Msg.action)
  _has_bits_[0] &= ~0x00000002u;
  ::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::Action* Msg::mutable_action() {
  _has_bits_[0] |= 0x00000002u;
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.action)
  return action_;
}
inline void Msg::set_allocated_action(::Action* action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(action_);
  }
  if (action) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:Msg.action)
}

// optional .ActionBatch action_batch = 4;
inline bool Msg::has_action_batch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ActionBatch& Msg::action_batch() const {
  const ::ActionBatch* p = action_batch_;
  // @@protoc_insertion_point(field_get:Msg.action_batch)
  return p != nullptr ? *p : *reinterpret_cast<const ::ActionBatch*>(
      &::_ActionBatch_default_instance_);
}
inline ::ActionBatch* Msg::release_action_batch() {
  // @@protoc_insertion_point(field_release:Msg.action_batch)
  _has_bits_[0] &= ~0x00000004u;
  ::ActionBatch* temp = action_batch_;
  action_batch_ = nullptr;
  return temp;
}
inline ::ActionBatch* Msg::mutable_action_batch() {
  _has_bits_[0] |= 0x00000004u;
  if (action_batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActionBatch>(GetArenaNoVirtual());
    action_batch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.action_batch)
  return action_batch_;
}
inline void Msg::set_allocated_action_batch(::ActionBatch* action_batch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(action_batch_);
  }
  if (action_batch) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_batch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_batch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_batch_ = action_batch;
  // @@protoc_insertion_point(field_set_allocated:Msg.action_batch)
}

// optional .StartAppProto startappproto = 5;
inline bool Msg::has_startappproto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::StartAppProto& Msg::startappproto() const {
  const ::StartAppProto* p = startappproto_;
  // @@protoc_insertion_point(field_get:Msg.startappproto)
  return p != nullptr ? *p : *reinterpret_cast<const ::StartAppProto*>(
      &::_StartAppProto_default_instance_);
}
inline ::StartAppProto* Msg::release_startappproto() {
  // @@protoc_insertion_point(field_release:Msg.startappproto)
  _has_bits_[0] &= ~0x00000008u;
  ::StartAppProto* temp = startappproto_;
  startappproto_ = nullptr;
  return temp;
}
inline ::StartAppProto* Msg::mutable_startappproto() {
  _has_bits_[0] |= 0x00000008u;
  if (startappproto_ == nullptr) {
    auto* p = CreateMaybeMessage<::StartAppProto>(GetArenaNoVirtual());
    startappproto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.startappproto)
  return startappproto_;
}
inline void Msg::set_allocated_startappproto(::StartAppProto* startappproto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(startappproto_);
  }
  if (startappproto) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      startappproto = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startappproto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  startappproto_ = startappproto;
  // @@protoc_insertion_point(field_set_allocated:Msg.startappproto)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Header_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Type>() {
  return ::Header_Type_descriptor();
}
template <> struct is_proto_enum< ::Header_Priority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Header_Priority>() {
  return ::Header_Priority_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_header_2eproto
