// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionBatch_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Action_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scalar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scalar_scalar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fapp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartAppProto_start_5fapp_2eproto;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class MsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Msg> _instance;
} _Msg_default_instance_;
static void InitDefaultsHeader_header_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Header_default_instance_;
    new (ptr) ::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Header_header_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader_header_2eproto}, {
      &scc_info_Scalar_scalar_2eproto.base,}};

static void InitDefaultsMsg_header_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_default_instance_;
    new (ptr) ::Msg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Msg_header_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMsg_header_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_Action_action_2eproto.base,
      &scc_info_ActionBatch_action_2eproto.base,
      &scc_info_StartAppProto_start_5fapp_2eproto.base,}};

void InitDefaults_header_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header_header_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Msg_header_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_header_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_header_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_header_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_header_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Header, flag_),
  PROTOBUF_FIELD_OFFSET(::Header, from_),
  PROTOBUF_FIELD_OFFSET(::Header, to_),
  PROTOBUF_FIELD_OFFSET(::Header, type_),
  PROTOBUF_FIELD_OFFSET(::Header, app_),
  PROTOBUF_FIELD_OFFSET(::Header, rpc_),
  PROTOBUF_FIELD_OFFSET(::Header, priority_),
  PROTOBUF_FIELD_OFFSET(::Header, from_length_),
  PROTOBUF_FIELD_OFFSET(::Header, split_string_from_),
  PROTOBUF_FIELD_OFFSET(::Header, to_length_),
  PROTOBUF_FIELD_OFFSET(::Header, split_string_to_),
  PROTOBUF_FIELD_OFFSET(::Header, depth_),
  PROTOBUF_FIELD_OFFSET(::Header, uid_),
  PROTOBUF_FIELD_OFFSET(::Header, metadatentry_),
  PROTOBUF_FIELD_OFFSET(::Header, callback_app_),
  PROTOBUF_FIELD_OFFSET(::Header, callback_rpc_),
  PROTOBUF_FIELD_OFFSET(::Header, ack_counter_),
  PROTOBUF_FIELD_OFFSET(::Header, data_ptr_),
  PROTOBUF_FIELD_OFFSET(::Header, data_channel_),
  PROTOBUF_FIELD_OFFSET(::Header, misc_bool_),
  PROTOBUF_FIELD_OFFSET(::Header, misc_int_),
  PROTOBUF_FIELD_OFFSET(::Header, misc_string_),
  PROTOBUF_FIELD_OFFSET(::Header, misc_double_),
  PROTOBUF_FIELD_OFFSET(::Header, misc_scalar_),
  PROTOBUF_FIELD_OFFSET(::Header, external_host_),
  PROTOBUF_FIELD_OFFSET(::Header, external_port_),
  6,
  7,
  8,
  16,
  0,
  1,
  17,
  9,
  ~0u,
  10,
  ~0u,
  11,
  14,
  ~0u,
  2,
  3,
  12,
  13,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  15,
  PROTOBUF_FIELD_OFFSET(::Msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg, header_),
  PROTOBUF_FIELD_OFFSET(::Msg, type_),
  PROTOBUF_FIELD_OFFSET(::Msg, action_),
  PROTOBUF_FIELD_OFFSET(::Msg, action_batch_),
  PROTOBUF_FIELD_OFFSET(::Msg, startappproto_),
  0,
  4,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 31, sizeof(::Header)},
  { 57, 67, sizeof(::Msg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Msg_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_header_2eproto = {
  {}, AddDescriptors_header_2eproto, "header.proto", schemas,
  file_default_instances, TableStruct_header_2eproto::offsets,
  file_level_metadata_header_2eproto, 2, file_level_enum_descriptors_header_2eproto, file_level_service_descriptors_header_2eproto,
};

const char descriptor_table_protodef_header_2eproto[] =
  "\n\014header.proto\032\014scalar.proto\032\014action.pro"
  "to\032\017start_app.proto\032\024cluster_config.prot"
  "o\"\211\005\n\006Header\022\014\n\004flag\030\001 \001(\004\022\014\n\004from\030\002 \002(\004"
  "\022\n\n\002to\030\003 \002(\004\022\032\n\004type\030\004 \002(\0162\014.Header.Type"
  "\022\013\n\003app\030\005 \001(\t\022\013\n\003rpc\030\006 \001(\t\022(\n\010priority\030\r"
  " \001(\0162\020.Header.Priority:\004HIGH\022\023\n\013from_len"
  "gth\030\016 \001(\004\022\031\n\021split_string_from\030\017 \003(\t\022\021\n\t"
  "to_length\030\020 \001(\004\022\027\n\017split_string_to\030\021 \003(\t"
  "\022\r\n\005depth\030\022 \001(\004\022\013\n\003uid\030\023 \001(\007\022\024\n\014metadate"
  "ntry\030\024 \003(\t\022\024\n\014callback_app\030\025 \001(\t\022\024\n\014call"
  "back_rpc\030\026 \001(\t\022\023\n\013ack_counter\030\027 \001(\006\022\020\n\010d"
  "ata_ptr\030\037 \001(\006\022\024\n\014data_channel\030  \001(\t\022\021\n\tm"
  "isc_bool\030) \003(\010\022\020\n\010misc_int\030* \003(\004\022\023\n\013misc"
  "_string\030+ \003(\014\022\023\n\013misc_double\030, \003(\001\022\034\n\013mi"
  "sc_scalar\030- \003(\0132\007.Scalar\022\025\n\rexternal_hos"
  "t\0303 \001(\t\022\025\n\rexternal_port\0304 \001(\005\"F\n\004Type\022\007"
  "\n\003RPC\020\001\022\014\n\010CALLBACK\020\002\022\007\n\003ACK\020\003\022\010\n\004DATA\020\004"
  "\022\n\n\006SYSTEM\020\005\022\010\n\004TEST\020\006\"\035\n\010Priority\022\007\n\003LO"
  "W\020\000\022\010\n\004HIGH\020\001\"\220\001\n\003Msg\022\027\n\006header\030\001 \002(\0132\007."
  "Header\022\014\n\004type\030\002 \002(\004\022\027\n\006action\030\003 \001(\0132\007.A"
  "ction\022\"\n\014action_batch\030\004 \001(\0132\014.ActionBatc"
  "h\022%\n\rstartappproto\030\005 \001(\0132\016.StartAppProto"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_header_2eproto = {
  false, InitDefaults_header_2eproto, 
  descriptor_table_protodef_header_2eproto,
  "header.proto", &assign_descriptors_table_header_2eproto, 880,
};

void AddDescriptors_header_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_scalar_2eproto,
    ::AddDescriptors_action_2eproto,
    ::AddDescriptors_start_5fapp_2eproto,
    ::AddDescriptors_cluster_5fconfig_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_header_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_header_2eproto = []() { AddDescriptors_header_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* Header_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_header_2eproto);
  return file_level_enum_descriptors_header_2eproto[0];
}
bool Header_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_Type Header::RPC;
const Header_Type Header::CALLBACK;
const Header_Type Header::ACK;
const Header_Type Header::DATA;
const Header_Type Header::SYSTEM;
const Header_Type Header::TEST;
const Header_Type Header::Type_MIN;
const Header_Type Header::Type_MAX;
const int Header::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_Priority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_header_2eproto);
  return file_level_enum_descriptors_header_2eproto[1];
}
bool Header_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_Priority Header::LOW;
const Header_Priority Header::HIGH;
const Header_Priority Header::Priority_MIN;
const Header_Priority Header::Priority_MAX;
const int Header::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::HasBitSetters {
 public:
  static void set_has_flag(Header* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_from(Header* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_to(Header* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_type(Header* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_app(Header* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rpc(Header* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_priority(Header* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_from_length(Header* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_to_length(Header* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_depth(Header* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_uid(Header* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_callback_app(Header* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_callback_rpc(Header* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ack_counter(Header* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_data_ptr(Header* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_data_channel(Header* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_external_host(Header* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_external_port(Header* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

void Header::clear_misc_scalar() {
  misc_scalar_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kFlagFieldNumber;
const int Header::kFromFieldNumber;
const int Header::kToFieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kAppFieldNumber;
const int Header::kRpcFieldNumber;
const int Header::kPriorityFieldNumber;
const int Header::kFromLengthFieldNumber;
const int Header::kSplitStringFromFieldNumber;
const int Header::kToLengthFieldNumber;
const int Header::kSplitStringToFieldNumber;
const int Header::kDepthFieldNumber;
const int Header::kUidFieldNumber;
const int Header::kMetadatentryFieldNumber;
const int Header::kCallbackAppFieldNumber;
const int Header::kCallbackRpcFieldNumber;
const int Header::kAckCounterFieldNumber;
const int Header::kDataPtrFieldNumber;
const int Header::kDataChannelFieldNumber;
const int Header::kMiscBoolFieldNumber;
const int Header::kMiscIntFieldNumber;
const int Header::kMiscStringFieldNumber;
const int Header::kMiscDoubleFieldNumber;
const int Header::kMiscScalarFieldNumber;
const int Header::kExternalHostFieldNumber;
const int Header::kExternalPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      split_string_from_(from.split_string_from_),
      split_string_to_(from.split_string_to_),
      metadatentry_(from.metadatentry_),
      misc_bool_(from.misc_bool_),
      misc_int_(from.misc_int_),
      misc_string_(from.misc_string_),
      misc_double_(from.misc_double_),
      misc_scalar_(from.misc_scalar_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app()) {
    app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
  }
  rpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rpc()) {
    rpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_);
  }
  callback_app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_callback_app()) {
    callback_app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_app_);
  }
  callback_rpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_callback_rpc()) {
    callback_rpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_rpc_);
  }
  data_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_channel()) {
    data_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_channel_);
  }
  external_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_host()) {
    external_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_host_);
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Header_header_2eproto.base);
  app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_rpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_port_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(external_port_));
  type_ = 1;
  priority_ = 1;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  SharedDtor();
}

void Header::SharedDtor() {
  app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callback_rpc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Header_header_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_string_from_.Clear();
  split_string_to_.Clear();
  metadatentry_.Clear();
  misc_bool_.Clear();
  misc_int_.Clear();
  misc_string_.Clear();
  misc_double_.Clear();
  misc_scalar_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      app_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rpc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      callback_app_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      callback_rpc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      data_channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      external_host_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_) -
        reinterpret_cast<char*>(&flag_)) + sizeof(from_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&to_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&external_port_) -
        reinterpret_cast<char*>(&to_)) + sizeof(external_port_));
  }
  if (cached_has_bits & 0x00030000u) {
    type_ = 1;
    priority_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Header::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Header*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 flag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint64 from = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_from(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint64 to = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_to(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .Header.Type type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Header_Type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::Header_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string app = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Header.app");
        object = msg->mutable_app();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string rpc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Header.rpc");
        object = msg->mutable_rpc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .Header.Priority priority = 13 [default = HIGH];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Header_Priority_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(13, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_priority(static_cast<::Header_Priority>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 from_length = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_from_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string split_string_from = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("Header.split_string_from");
          object = msg->add_split_string_from();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // optional uint64 to_length = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_to_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string split_string_to = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("Header.split_string_to");
          object = msg->add_split_string_to();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 394 && (ptr += 2));
        break;
      }
      // optional uint64 depth = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_depth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 uid = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_uid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated string metadatentry = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("Header.metadatentry");
          object = msg->add_metadatentry();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // optional string callback_app = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Header.callback_app");
        object = msg->mutable_callback_app();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string callback_rpc = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Header.callback_rpc");
        object = msg->mutable_callback_rpc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 ack_counter = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 185) goto handle_unusual;
        msg->set_ack_counter(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 data_ptr = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 249) goto handle_unusual;
        msg->set_data_ptr(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string data_channel = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Header.data_channel");
        object = msg->mutable_data_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bool misc_bool = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_misc_bool(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 712 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedBoolParser;
        object = msg->mutable_misc_bool();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint64 misc_int = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) == 80) {
          do {
            msg->add_misc_int(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 720 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_misc_int();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated bytes misc_string = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_misc_string();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 730 && (ptr += 2));
        break;
      }
      // repeated double misc_double = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) == 97) {
          do {
            msg->add_misc_double(::google::protobuf::io::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 737 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
        object = msg->mutable_misc_double();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .Scalar misc_scalar = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Scalar::_InternalParse;
          object = msg->add_misc_scalar();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 746 && (ptr += 2));
        break;
      }
      // optional string external_host = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Header.external_host");
        object = msg->mutable_external_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 external_port = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_external_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_flag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 from = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_from(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_to(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Header.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Type_IsValid(value)) {
            set_type(static_cast< ::Header_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app().data(), static_cast<int>(this->app().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rpc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rpc().data(), static_cast<int>(this->rpc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.rpc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Header.Priority priority = 13 [default = HIGH];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Priority_IsValid(value)) {
            set_priority(static_cast< ::Header_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 from_length = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_from_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string split_string_from = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_split_string_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->split_string_from(this->split_string_from_size() - 1).data(),
            static_cast<int>(this->split_string_from(this->split_string_from_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.split_string_from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_to_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string split_string_to = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_split_string_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->split_string_to(this->split_string_to_size() - 1).data(),
            static_cast<int>(this->split_string_to(this->split_string_to_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.split_string_to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 depth = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_depth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 uid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {
          HasBitSetters::set_has_uid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string metadatentry = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metadatentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadatentry(this->metadatentry_size() - 1).data(),
            static_cast<int>(this->metadatentry(this->metadatentry_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.metadatentry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string callback_app = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callback_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callback_app().data(), static_cast<int>(this->callback_app().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.callback_app");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string callback_rpc = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callback_rpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callback_rpc().data(), static_cast<int>(this->callback_rpc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.callback_rpc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ack_counter = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (185 & 0xFF)) {
          HasBitSetters::set_has_ack_counter(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ack_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 data_ptr = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (249 & 0xFF)) {
          HasBitSetters::set_has_data_ptr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &data_ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_channel = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_channel().data(), static_cast<int>(this->data_channel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.data_channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool misc_bool = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 328u, input, this->mutable_misc_bool())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_misc_bool())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 misc_int = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 336u, input, this->mutable_misc_int())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (338 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_misc_int())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes misc_string = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (346 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_misc_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double misc_double = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (353 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 353u, input, this->mutable_misc_double())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (354 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_misc_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Scalar misc_scalar = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (362 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_misc_scalar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_host = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_host().data(), static_cast<int>(this->external_host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.external_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 external_port = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_external_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Header)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 flag = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->flag(), output);
  }

  // required uint64 from = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from(), output);
  }

  // required uint64 to = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to(), output);
  }

  // required .Header.Type type = 4;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string app = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->app(), output);
  }

  // optional string rpc = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rpc().data(), static_cast<int>(this->rpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.rpc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rpc(), output);
  }

  // optional .Header.Priority priority = 13 [default = HIGH];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->priority(), output);
  }

  // optional uint64 from_length = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->from_length(), output);
  }

  // repeated string split_string_from = 15;
  for (int i = 0, n = this->split_string_from_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->split_string_from(i).data(), static_cast<int>(this->split_string_from(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.split_string_from");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->split_string_from(i), output);
  }

  // optional uint64 to_length = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->to_length(), output);
  }

  // repeated string split_string_to = 17;
  for (int i = 0, n = this->split_string_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->split_string_to(i).data(), static_cast<int>(this->split_string_to(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.split_string_to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->split_string_to(i), output);
  }

  // optional uint64 depth = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->depth(), output);
  }

  // optional fixed32 uid = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->uid(), output);
  }

  // repeated string metadatentry = 20;
  for (int i = 0, n = this->metadatentry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadatentry(i).data(), static_cast<int>(this->metadatentry(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.metadatentry");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->metadatentry(i), output);
  }

  // optional string callback_app = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_app().data(), static_cast<int>(this->callback_app().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->callback_app(), output);
  }

  // optional string callback_rpc = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_rpc().data(), static_cast<int>(this->callback_rpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_rpc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->callback_rpc(), output);
  }

  // optional fixed64 ack_counter = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(23, this->ack_counter(), output);
  }

  // optional fixed64 data_ptr = 31;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(31, this->data_ptr(), output);
  }

  // optional string data_channel = 32;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_channel().data(), static_cast<int>(this->data_channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.data_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->data_channel(), output);
  }

  // repeated bool misc_bool = 41;
  for (int i = 0, n = this->misc_bool_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      41, this->misc_bool(i), output);
  }

  // repeated uint64 misc_int = 42;
  for (int i = 0, n = this->misc_int_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      42, this->misc_int(i), output);
  }

  // repeated bytes misc_string = 43;
  for (int i = 0, n = this->misc_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      43, this->misc_string(i), output);
  }

  // repeated double misc_double = 44;
  for (int i = 0, n = this->misc_double_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      44, this->misc_double(i), output);
  }

  // repeated .Scalar misc_scalar = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misc_scalar_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45,
      this->misc_scalar(static_cast<int>(i)),
      output);
  }

  // optional string external_host = 51;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_host().data(), static_cast<int>(this->external_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.external_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->external_host(), output);
  }

  // optional int32 external_port = 52;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->external_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 flag = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->flag(), target);
  }

  // required uint64 from = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from(), target);
  }

  // required uint64 to = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to(), target);
  }

  // required .Header.Type type = 4;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string app = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app().data(), static_cast<int>(this->app().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->app(), target);
  }

  // optional string rpc = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rpc().data(), static_cast<int>(this->rpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.rpc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rpc(), target);
  }

  // optional .Header.Priority priority = 13 [default = HIGH];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->priority(), target);
  }

  // optional uint64 from_length = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->from_length(), target);
  }

  // repeated string split_string_from = 15;
  for (int i = 0, n = this->split_string_from_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->split_string_from(i).data(), static_cast<int>(this->split_string_from(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.split_string_from");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->split_string_from(i), target);
  }

  // optional uint64 to_length = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->to_length(), target);
  }

  // repeated string split_string_to = 17;
  for (int i = 0, n = this->split_string_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->split_string_to(i).data(), static_cast<int>(this->split_string_to(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.split_string_to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->split_string_to(i), target);
  }

  // optional uint64 depth = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->depth(), target);
  }

  // optional fixed32 uid = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->uid(), target);
  }

  // repeated string metadatentry = 20;
  for (int i = 0, n = this->metadatentry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadatentry(i).data(), static_cast<int>(this->metadatentry(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.metadatentry");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->metadatentry(i), target);
  }

  // optional string callback_app = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_app().data(), static_cast<int>(this->callback_app().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->callback_app(), target);
  }

  // optional string callback_rpc = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callback_rpc().data(), static_cast<int>(this->callback_rpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.callback_rpc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->callback_rpc(), target);
  }

  // optional fixed64 ack_counter = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(23, this->ack_counter(), target);
  }

  // optional fixed64 data_ptr = 31;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(31, this->data_ptr(), target);
  }

  // optional string data_channel = 32;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_channel().data(), static_cast<int>(this->data_channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.data_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->data_channel(), target);
  }

  // repeated bool misc_bool = 41;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(41, this->misc_bool_, target);

  // repeated uint64 misc_int = 42;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(42, this->misc_int_, target);

  // repeated bytes misc_string = 43;
  for (int i = 0, n = this->misc_string_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(43, this->misc_string(i), target);
  }

  // repeated double misc_double = 44;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(44, this->misc_double_, target);

  // repeated .Scalar misc_scalar = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misc_scalar_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, this->misc_scalar(static_cast<int>(i)), target);
  }

  // optional string external_host = 51;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_host().data(), static_cast<int>(this->external_host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.external_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->external_host(), target);
  }

  // optional int32 external_port = 52;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->external_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Header)
  size_t total_size = 0;

  if (has_from()) {
    // required uint64 from = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->from());
  }

  if (has_to()) {
    // required uint64 to = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->to());
  }

  if (has_type()) {
    // required .Header.Type type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00010180) ^ 0x00010180) == 0) {  // All required fields are present.
    // required uint64 from = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->from());

    // required uint64 to = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->to());

    // required .Header.Type type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string split_string_from = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->split_string_from_size());
  for (int i = 0, n = this->split_string_from_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->split_string_from(i));
  }

  // repeated string split_string_to = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->split_string_to_size());
  for (int i = 0, n = this->split_string_to_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->split_string_to(i));
  }

  // repeated string metadatentry = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->metadatentry_size());
  for (int i = 0, n = this->metadatentry_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metadatentry(i));
  }

  // repeated bool misc_bool = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->misc_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->misc_bool_size());
    total_size += data_size;
  }

  // repeated uint64 misc_int = 42;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->misc_int_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->misc_int_size());
    total_size += data_size;
  }

  // repeated bytes misc_string = 43;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->misc_string_size());
  for (int i = 0, n = this->misc_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->misc_string(i));
  }

  // repeated double misc_double = 44;
  {
    unsigned int count = static_cast<unsigned int>(this->misc_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->misc_double_size());
    total_size += data_size;
  }

  // repeated .Scalar misc_scalar = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->misc_scalar_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->misc_scalar(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string app = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app());
    }

    // optional string rpc = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rpc());
    }

    // optional string callback_app = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callback_app());
    }

    // optional string callback_rpc = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callback_rpc());
    }

    // optional string data_channel = 32;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_channel());
    }

    // optional string external_host = 51;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_host());
    }

    // optional uint64 flag = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }

  }
  if (cached_has_bits & 0x0000fe00u) {
    // optional uint64 from_length = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_length());
    }

    // optional uint64 to_length = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_length());
    }

    // optional uint64 depth = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->depth());
    }

    // optional fixed64 ack_counter = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 data_ptr = 31;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional fixed32 uid = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional int32 external_port = 52;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_port());
    }

  }
  // optional .Header.Priority priority = 13 [default = HIGH];
  if (cached_has_bits & 0x00020000u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  split_string_from_.MergeFrom(from.split_string_from_);
  split_string_to_.MergeFrom(from.split_string_to_);
  metadatentry_.MergeFrom(from.metadatentry_);
  misc_bool_.MergeFrom(from.misc_bool_);
  misc_int_.MergeFrom(from.misc_int_);
  misc_string_.MergeFrom(from.misc_string_);
  misc_double_.MergeFrom(from.misc_double_);
  misc_scalar_.MergeFrom(from.misc_scalar_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rpc_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      callback_app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_app_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      callback_rpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callback_rpc_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      data_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_channel_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      external_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_host_);
    }
    if (cached_has_bits & 0x00000040u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      to_ = from.to_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_length_ = from.from_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      to_length_ = from.to_length_;
    }
    if (cached_has_bits & 0x00000800u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00001000u) {
      ack_counter_ = from.ack_counter_;
    }
    if (cached_has_bits & 0x00002000u) {
      data_ptr_ = from.data_ptr_;
    }
    if (cached_has_bits & 0x00004000u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00008000u) {
      external_port_ = from.external_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00020000u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010180) != 0x00010180) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->misc_scalar())) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  split_string_from_.InternalSwap(CastToBase(&other->split_string_from_));
  split_string_to_.InternalSwap(CastToBase(&other->split_string_to_));
  metadatentry_.InternalSwap(CastToBase(&other->metadatentry_));
  misc_bool_.InternalSwap(&other->misc_bool_);
  misc_int_.InternalSwap(&other->misc_int_);
  misc_string_.InternalSwap(CastToBase(&other->misc_string_));
  misc_double_.InternalSwap(&other->misc_double_);
  CastToBase(&misc_scalar_)->InternalSwap(CastToBase(&other->misc_scalar_));
  app_.Swap(&other->app_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rpc_.Swap(&other->rpc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  callback_app_.Swap(&other->callback_app_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  callback_rpc_.Swap(&other->callback_rpc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_channel_.Swap(&other->data_channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_host_.Swap(&other->external_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(from_length_, other->from_length_);
  swap(to_length_, other->to_length_);
  swap(depth_, other->depth_);
  swap(ack_counter_, other->ack_counter_);
  swap(data_ptr_, other->data_ptr_);
  swap(uid_, other->uid_);
  swap(external_port_, other->external_port_);
  swap(type_, other->type_);
  swap(priority_, other->priority_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_header_2eproto);
  return ::file_level_metadata_header_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Msg::InitAsDefaultInstance() {
  ::_Msg_default_instance_._instance.get_mutable()->header_ = const_cast< ::Header*>(
      ::Header::internal_default_instance());
  ::_Msg_default_instance_._instance.get_mutable()->action_ = const_cast< ::Action*>(
      ::Action::internal_default_instance());
  ::_Msg_default_instance_._instance.get_mutable()->action_batch_ = const_cast< ::ActionBatch*>(
      ::ActionBatch::internal_default_instance());
  ::_Msg_default_instance_._instance.get_mutable()->startappproto_ = const_cast< ::StartAppProto*>(
      ::StartAppProto::internal_default_instance());
}
class Msg::HasBitSetters {
 public:
  static const ::Header& header(const Msg* msg);
  static void set_has_header(Msg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type(Msg* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::Action& action(const Msg* msg);
  static void set_has_action(Msg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ActionBatch& action_batch(const Msg* msg);
  static void set_has_action_batch(Msg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::StartAppProto& startappproto(const Msg* msg);
  static void set_has_startappproto(Msg* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::Header&
Msg::HasBitSetters::header(const Msg* msg) {
  return *msg->header_;
}
const ::Action&
Msg::HasBitSetters::action(const Msg* msg) {
  return *msg->action_;
}
const ::ActionBatch&
Msg::HasBitSetters::action_batch(const Msg* msg) {
  return *msg->action_batch_;
}
const ::StartAppProto&
Msg::HasBitSetters::startappproto(const Msg* msg) {
  return *msg->startappproto_;
}
void Msg::clear_action() {
  if (action_ != nullptr) action_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_action_batch() {
  if (action_batch_ != nullptr) action_batch_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Msg::clear_startappproto() {
  if (startappproto_ != nullptr) startappproto_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kHeaderFieldNumber;
const int Msg::kTypeFieldNumber;
const int Msg::kActionFieldNumber;
const int Msg::kActionBatchFieldNumber;
const int Msg::kStartappprotoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg)
}
Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_action()) {
    action_ = new ::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from.has_action_batch()) {
    action_batch_ = new ::ActionBatch(*from.action_batch_);
  } else {
    action_batch_ = nullptr;
  }
  if (from.has_startappproto()) {
    startappproto_ = new ::StartAppProto(*from.startappproto_);
  } else {
    startappproto_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Msg)
}

void Msg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Msg_header_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete action_batch_;
  if (this != internal_default_instance()) delete startappproto_;
}

void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg& Msg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Msg_header_2eproto.base);
  return *internal_default_instance();
}


void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(action_ != nullptr);
      action_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_batch_ != nullptr);
      action_batch_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(startappproto_ != nullptr);
      startappproto_->Clear();
    }
  }
  type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Msg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Msg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .Header header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required uint64 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Action action = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Action::_InternalParse;
        object = msg->mutable_action();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ActionBatch action_batch = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ActionBatch::_InternalParse;
        object = msg->mutable_action_batch();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .StartAppProto startappproto = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::StartAppProto::_InternalParse;
        object = msg->mutable_startappproto();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Msg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Action action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ActionBatch action_batch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StartAppProto startappproto = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startappproto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Msg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // required uint64 type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->type(), output);
  }

  // optional .Action action = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::action(this), output);
  }

  // optional .ActionBatch action_batch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::action_batch(this), output);
  }

  // optional .StartAppProto startappproto = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::startappproto(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // required uint64 type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->type(), target);
  }

  // optional .Action action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::action(this), target);
  }

  // optional .ActionBatch action_batch = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::action_batch(this), target);
  }

  // optional .StartAppProto startappproto = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::startappproto(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg)
  return target;
}

size_t Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Msg)
  size_t total_size = 0;

  if (has_header()) {
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (has_type()) {
    // required uint64 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  return total_size;
}
size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint64 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .Action action = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional .ActionBatch action_batch = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_batch_);
    }

    // optional .StartAppProto startappproto = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *startappproto_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg* source =
      ::google::protobuf::DynamicCastToGenerated<Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_action()->::Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action_batch()->::ActionBatch::MergeFrom(from.action_batch());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_startappproto()->::StartAppProto::MergeFrom(from.startappproto());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action_->IsInitialized()) return false;
  }
  if (has_action_batch()) {
    if (!this->action_batch_->IsInitialized()) return false;
  }
  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(action_, other->action_);
  swap(action_batch_, other->action_batch_);
  swap(startappproto_, other->startappproto_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_header_2eproto);
  return ::file_level_metadata_header_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Header* Arena::CreateMaybeMessage< ::Header >(Arena* arena) {
  return Arena::CreateInternal< ::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::Msg* Arena::CreateMaybeMessage< ::Msg >(Arena* arena) {
  return Arena::CreateInternal< ::Msg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
