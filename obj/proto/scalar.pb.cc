// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scalar.proto

#include "scalar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_scalar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UInt64Pair_scalar_2eproto;
class ScalarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scalar> _instance;
} _Scalar_default_instance_;
class EmptyProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmptyProto> _instance;
} _EmptyProto_default_instance_;
class UInt64PairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UInt64Pair> _instance;
} _UInt64Pair_default_instance_;
class PairSequenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PairSequence> _instance;
} _PairSequence_default_instance_;
static void InitDefaultsScalar_scalar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Scalar_default_instance_;
    new (ptr) ::Scalar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Scalar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scalar_scalar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScalar_scalar_2eproto}, {}};

static void InitDefaultsEmptyProto_scalar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EmptyProto_default_instance_;
    new (ptr) ::EmptyProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EmptyProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmptyProto_scalar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmptyProto_scalar_2eproto}, {}};

static void InitDefaultsUInt64Pair_scalar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UInt64Pair_default_instance_;
    new (ptr) ::UInt64Pair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UInt64Pair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UInt64Pair_scalar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUInt64Pair_scalar_2eproto}, {}};

static void InitDefaultsPairSequence_scalar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PairSequence_default_instance_;
    new (ptr) ::PairSequence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PairSequence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PairSequence_scalar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPairSequence_scalar_2eproto}, {
      &scc_info_UInt64Pair_scalar_2eproto.base,}};

void InitDefaults_scalar_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Scalar_scalar_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmptyProto_scalar_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UInt64Pair_scalar_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PairSequence_scalar_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_scalar_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_scalar_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_scalar_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_scalar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Scalar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Scalar, type_),
  PROTOBUF_FIELD_OFFSET(::Scalar, bool_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, int32_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, int64_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, uint32_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, uint64_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, float_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, double_value_),
  PROTOBUF_FIELD_OFFSET(::Scalar, string_value_),
  8,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::EmptyProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EmptyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UInt64Pair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UInt64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UInt64Pair, first_),
  PROTOBUF_FIELD_OFFSET(::UInt64Pair, second_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PairSequence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PairSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PairSequence, pairs_),
  PROTOBUF_FIELD_OFFSET(::PairSequence, misc_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::Scalar)},
  { 23, 28, sizeof(::EmptyProto)},
  { 28, 35, sizeof(::UInt64Pair)},
  { 37, 44, sizeof(::PairSequence)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Scalar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EmptyProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UInt64Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PairSequence_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_scalar_2eproto = {
  {}, AddDescriptors_scalar_2eproto, "scalar.proto", schemas,
  file_default_instances, TableStruct_scalar_2eproto::offsets,
  file_level_metadata_scalar_2eproto, 4, file_level_enum_descriptors_scalar_2eproto, file_level_service_descriptors_scalar_2eproto,
};

const char descriptor_table_protodef_scalar_2eproto[] =
  "\n\014scalar.proto\"\316\002\n\006Scalar\022&\n\004type\030\001 \002(\0162"
  "\022.Scalar.ScalarType:\004UNIT\022\022\n\nbool_value\030"
  "\002 \001(\010\022\023\n\013int32_value\030\003 \001(\005\022\023\n\013int64_valu"
  "e\030\004 \001(\003\022\024\n\014uint32_value\030\005 \001(\r\022\024\n\014uint64_"
  "value\030\006 \001(\004\022\023\n\013float_value\030\007 \001(\002\022\024\n\014doub"
  "le_value\030\010 \001(\001\022\024\n\014string_value\030\t \001(\t\"q\n\n"
  "ScalarType\022\010\n\004UNIT\020\001\022\010\n\004BOOL\020\002\022\t\n\005INT32\020"
  "\003\022\t\n\005INT64\020\004\022\n\n\006UINT32\020\005\022\n\n\006UINT64\020\006\022\t\n\005"
  "FLOAT\020\007\022\n\n\006DOUBLE\020\010\022\n\n\006STRING\020\t\"\014\n\nEmpty"
  "Proto\"+\n\nUInt64Pair\022\r\n\005first\030\001 \001(\004\022\016\n\006se"
  "cond\030\002 \001(\004\"8\n\014PairSequence\022\032\n\005pairs\030\001 \003("
  "\0132\013.UInt64Pair\022\014\n\004misc\030\002 \001(\004"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_scalar_2eproto = {
  false, InitDefaults_scalar_2eproto, 
  descriptor_table_protodef_scalar_2eproto,
  "scalar.proto", &assign_descriptors_table_scalar_2eproto, 468,
};

void AddDescriptors_scalar_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_scalar_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scalar_2eproto = []() { AddDescriptors_scalar_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* Scalar_ScalarType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_scalar_2eproto);
  return file_level_enum_descriptors_scalar_2eproto[0];
}
bool Scalar_ScalarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scalar_ScalarType Scalar::UNIT;
const Scalar_ScalarType Scalar::BOOL;
const Scalar_ScalarType Scalar::INT32;
const Scalar_ScalarType Scalar::INT64;
const Scalar_ScalarType Scalar::UINT32;
const Scalar_ScalarType Scalar::UINT64;
const Scalar_ScalarType Scalar::FLOAT;
const Scalar_ScalarType Scalar::DOUBLE;
const Scalar_ScalarType Scalar::STRING;
const Scalar_ScalarType Scalar::ScalarType_MIN;
const Scalar_ScalarType Scalar::ScalarType_MAX;
const int Scalar::ScalarType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Scalar::InitAsDefaultInstance() {
}
class Scalar::HasBitSetters {
 public:
  static void set_has_type(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_bool_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_int32_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_int64_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_uint32_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_uint64_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_float_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_double_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_string_value(Scalar* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar::kTypeFieldNumber;
const int Scalar::kBoolValueFieldNumber;
const int Scalar::kInt32ValueFieldNumber;
const int Scalar::kInt64ValueFieldNumber;
const int Scalar::kUint32ValueFieldNumber;
const int Scalar::kUint64ValueFieldNumber;
const int Scalar::kFloatValueFieldNumber;
const int Scalar::kDoubleValueFieldNumber;
const int Scalar::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar::Scalar()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&bool_value_, &from.bool_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&bool_value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Scalar)
}

void Scalar::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Scalar_scalar_2eproto.base);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bool_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&double_value_) -
      reinterpret_cast<char*>(&bool_value_)) + sizeof(double_value_));
  type_ = 1;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar& Scalar::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Scalar_scalar_2eproto.base);
  return *internal_default_instance();
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:Scalar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_value_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&bool_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&double_value_) -
        reinterpret_cast<char*>(&bool_value_)) + sizeof(double_value_));
  }
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Scalar::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Scalar*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .Scalar.ScalarType type = 1 [default = UNIT];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Scalar_ScalarType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::Scalar_ScalarType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bool_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bool_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 int32_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_int32_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 int64_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_int64_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 uint32_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_uint32_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 uint64_value = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_uint64_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float float_value = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_float_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional double double_value = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_double_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional string string_value = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Scalar.string_value");
        object = msg->mutable_string_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Scalar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Scalar.ScalarType type = 1 [default = UNIT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Scalar_ScalarType_IsValid(value)) {
            set_type(static_cast< ::Scalar_ScalarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bool_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int32_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_int32_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int64_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_int64_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint32_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_uint32_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uint64_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_uint64_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_float_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_double_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Scalar.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Scalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Scalar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Scalar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool bool_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_value(), output);
  }

  // optional int32 int32_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }

  // optional int64 int64_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int64_value(), output);
  }

  // optional uint32 uint32_value = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_value(), output);
  }

  // optional uint64 uint64_value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64_value(), output);
  }

  // optional float float_value = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->float_value(), output);
  }

  // optional double double_value = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->double_value(), output);
  }

  // optional string string_value = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scalar.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->string_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Scalar)
}

::google::protobuf::uint8* Scalar::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Scalar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool bool_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bool_value(), target);
  }

  // optional int32 int32_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_value(), target);
  }

  // optional int64 int64_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int64_value(), target);
  }

  // optional uint32 uint32_value = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_value(), target);
  }

  // optional uint64 uint64_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64_value(), target);
  }

  // optional float float_value = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->float_value(), target);
  }

  // optional double double_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->double_value(), target);
  }

  // optional string string_value = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scalar.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->string_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Scalar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_value = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional bool bool_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 int32_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
    }

    // optional int64 int64_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
    }

    // optional uint64 uint64_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_value());
    }

    // optional uint32 uint32_value = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_value());
    }

    // optional float float_value = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional double double_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar* source =
      ::google::protobuf::DynamicCastToGenerated<Scalar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Scalar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      int32_value_ = from.int32_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      int64_value_ = from.int64_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      uint64_value_ = from.uint64_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      uint32_value_ = from.uint32_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      double_value_ = from.double_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_type(from.type());
  }
}

void Scalar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_value_.Swap(&other->string_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bool_value_, other->bool_value_);
  swap(int32_value_, other->int32_value_);
  swap(int64_value_, other->int64_value_);
  swap(uint64_value_, other->uint64_value_);
  swap(uint32_value_, other->uint32_value_);
  swap(float_value_, other->float_value_);
  swap(double_value_, other->double_value_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Scalar::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_scalar_2eproto);
  return ::file_level_metadata_scalar_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EmptyProto::InitAsDefaultInstance() {
}
class EmptyProto::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyProto::EmptyProto()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EmptyProto)
}
EmptyProto::EmptyProto(const EmptyProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EmptyProto)
}

void EmptyProto::SharedCtor() {
}

EmptyProto::~EmptyProto() {
  // @@protoc_insertion_point(destructor:EmptyProto)
  SharedDtor();
}

void EmptyProto::SharedDtor() {
}

void EmptyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyProto& EmptyProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmptyProto_scalar_2eproto.base);
  return *internal_default_instance();
}


void EmptyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:EmptyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmptyProto*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EmptyProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EmptyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EmptyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EmptyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EmptyProto)
}

::google::protobuf::uint8* EmptyProto::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EmptyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EmptyProto)
  return target;
}

size_t EmptyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EmptyProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EmptyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyProto* source =
      ::google::protobuf::DynamicCastToGenerated<EmptyProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EmptyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EmptyProto)
    MergeFrom(*source);
  }
}

void EmptyProto::MergeFrom(const EmptyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EmptyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EmptyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyProto::CopyFrom(const EmptyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EmptyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyProto::IsInitialized() const {
  return true;
}

void EmptyProto::Swap(EmptyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyProto::InternalSwap(EmptyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata EmptyProto::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_scalar_2eproto);
  return ::file_level_metadata_scalar_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UInt64Pair::InitAsDefaultInstance() {
}
class UInt64Pair::HasBitSetters {
 public:
  static void set_has_first(UInt64Pair* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_second(UInt64Pair* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Pair::kFirstFieldNumber;
const int UInt64Pair::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Pair::UInt64Pair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UInt64Pair)
}
UInt64Pair::UInt64Pair(const UInt64Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_, &from.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&first_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:UInt64Pair)
}

void UInt64Pair::SharedCtor() {
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&first_)) + sizeof(second_));
}

UInt64Pair::~UInt64Pair() {
  // @@protoc_insertion_point(destructor:UInt64Pair)
  SharedDtor();
}

void UInt64Pair::SharedDtor() {
}

void UInt64Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UInt64Pair& UInt64Pair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UInt64Pair_scalar_2eproto.base);
  return *internal_default_instance();
}


void UInt64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:UInt64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&first_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_) -
        reinterpret_cast<char*>(&first_)) + sizeof(second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UInt64Pair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UInt64Pair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 first = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_first(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 second = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_second(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UInt64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UInt64Pair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_first(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_second(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UInt64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UInt64Pair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UInt64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UInt64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 first = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->first(), output);
  }

  // optional uint64 second = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UInt64Pair)
}

::google::protobuf::uint8* UInt64Pair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UInt64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->first(), target);
  }

  // optional uint64 second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UInt64Pair)
  return target;
}

size_t UInt64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UInt64Pair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 first = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first());
    }

    // optional uint64 second = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->second());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt64Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UInt64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Pair* source =
      ::google::protobuf::DynamicCastToGenerated<UInt64Pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UInt64Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UInt64Pair)
    MergeFrom(*source);
  }
}

void UInt64Pair::MergeFrom(const UInt64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UInt64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      first_ = from.first_;
    }
    if (cached_has_bits & 0x00000002u) {
      second_ = from.second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UInt64Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Pair::CopyFrom(const UInt64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Pair::IsInitialized() const {
  return true;
}

void UInt64Pair::Swap(UInt64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Pair::InternalSwap(UInt64Pair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(first_, other->first_);
  swap(second_, other->second_);
}

::google::protobuf::Metadata UInt64Pair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_scalar_2eproto);
  return ::file_level_metadata_scalar_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PairSequence::InitAsDefaultInstance() {
}
class PairSequence::HasBitSetters {
 public:
  static void set_has_misc(PairSequence* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PairSequence::kPairsFieldNumber;
const int PairSequence::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PairSequence::PairSequence()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PairSequence)
}
PairSequence::PairSequence(const PairSequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  misc_ = from.misc_;
  // @@protoc_insertion_point(copy_constructor:PairSequence)
}

void PairSequence::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PairSequence_scalar_2eproto.base);
  misc_ = PROTOBUF_ULONGLONG(0);
}

PairSequence::~PairSequence() {
  // @@protoc_insertion_point(destructor:PairSequence)
  SharedDtor();
}

void PairSequence::SharedDtor() {
}

void PairSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PairSequence& PairSequence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PairSequence_scalar_2eproto.base);
  return *internal_default_instance();
}


void PairSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:PairSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  misc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PairSequence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PairSequence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .UInt64Pair pairs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::UInt64Pair::_InternalParse;
          object = msg->add_pairs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional uint64 misc = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_misc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PairSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PairSequence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UInt64Pair pairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 misc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_misc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &misc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PairSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PairSequence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PairSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PairSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UInt64Pair pairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pairs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 misc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->misc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PairSequence)
}

::google::protobuf::uint8* PairSequence::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PairSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UInt64Pair pairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pairs(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 misc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->misc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PairSequence)
  return target;
}

size_t PairSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PairSequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UInt64Pair pairs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pairs(static_cast<int>(i)));
    }
  }

  // optional uint64 misc = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->misc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PairSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const PairSequence* source =
      ::google::protobuf::DynamicCastToGenerated<PairSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PairSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PairSequence)
    MergeFrom(*source);
  }
}

void PairSequence::MergeFrom(const PairSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PairSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (from.has_misc()) {
    set_misc(from.misc());
  }
}

void PairSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PairSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairSequence::CopyFrom(const PairSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PairSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairSequence::IsInitialized() const {
  return true;
}

void PairSequence::Swap(PairSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PairSequence::InternalSwap(PairSequence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&pairs_)->InternalSwap(CastToBase(&other->pairs_));
  swap(misc_, other->misc_);
}

::google::protobuf::Metadata PairSequence::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_scalar_2eproto);
  return ::file_level_metadata_scalar_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Scalar* Arena::CreateMaybeMessage< ::Scalar >(Arena* arena) {
  return Arena::CreateInternal< ::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::EmptyProto* Arena::CreateMaybeMessage< ::EmptyProto >(Arena* arena) {
  return Arena::CreateInternal< ::EmptyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::UInt64Pair* Arena::CreateMaybeMessage< ::UInt64Pair >(Arena* arena) {
  return Arena::CreateInternal< ::UInt64Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::PairSequence* Arena::CreateMaybeMessage< ::PairSequence >(Arena* arena) {
  return Arena::CreateInternal< ::PairSequence >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
