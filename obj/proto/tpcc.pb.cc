// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tpcc.proto

#include "tpcc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class NewOrderInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewOrderInput> _instance;
} _NewOrderInput_default_instance_;
static void InitDefaultsNewOrderInput_tpcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewOrderInput_default_instance_;
    new (ptr) ::NewOrderInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewOrderInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NewOrderInput_tpcc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNewOrderInput_tpcc_2eproto}, {}};

void InitDefaults_tpcc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NewOrderInput_tpcc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_tpcc_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_tpcc_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_tpcc_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_tpcc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NewOrderInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NewOrderInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NewOrderInput, district_),
  PROTOBUF_FIELD_OFFSET(::NewOrderInput, customer_),
  PROTOBUF_FIELD_OFFSET(::NewOrderInput, order_),
  PROTOBUF_FIELD_OFFSET(::NewOrderInput, ol_item_),
  0,
  1,
  2,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::NewOrderInput)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NewOrderInput_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_tpcc_2eproto = {
  {}, AddDescriptors_tpcc_2eproto, "tpcc.proto", schemas,
  file_default_instances, TableStruct_tpcc_2eproto::offsets,
  file_level_metadata_tpcc_2eproto, 1, file_level_enum_descriptors_tpcc_2eproto, file_level_service_descriptors_tpcc_2eproto,
};

const char descriptor_table_protodef_tpcc_2eproto[] =
  "\n\ntpcc.proto\"S\n\rNewOrderInput\022\020\n\010distric"
  "t\030\001 \001(\005\022\020\n\010customer\030\002 \001(\005\022\r\n\005order\030\003 \001(\005"
  "\022\017\n\007ol_item\030\004 \003(\005"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_tpcc_2eproto = {
  false, InitDefaults_tpcc_2eproto, 
  descriptor_table_protodef_tpcc_2eproto,
  "tpcc.proto", &assign_descriptors_table_tpcc_2eproto, 97,
};

void AddDescriptors_tpcc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_tpcc_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tpcc_2eproto = []() { AddDescriptors_tpcc_2eproto(); return true; }();

// ===================================================================

void NewOrderInput::InitAsDefaultInstance() {
}
class NewOrderInput::HasBitSetters {
 public:
  static void set_has_district(NewOrderInput* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_customer(NewOrderInput* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_order(NewOrderInput* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewOrderInput::kDistrictFieldNumber;
const int NewOrderInput::kCustomerFieldNumber;
const int NewOrderInput::kOrderFieldNumber;
const int NewOrderInput::kOlItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewOrderInput::NewOrderInput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewOrderInput)
}
NewOrderInput::NewOrderInput(const NewOrderInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ol_item_(from.ol_item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&district_, &from.district_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&district_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:NewOrderInput)
}

void NewOrderInput::SharedCtor() {
  ::memset(&district_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&district_)) + sizeof(order_));
}

NewOrderInput::~NewOrderInput() {
  // @@protoc_insertion_point(destructor:NewOrderInput)
  SharedDtor();
}

void NewOrderInput::SharedDtor() {
}

void NewOrderInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewOrderInput& NewOrderInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewOrderInput_tpcc_2eproto.base);
  return *internal_default_instance();
}


void NewOrderInput::Clear() {
// @@protoc_insertion_point(message_clear_start:NewOrderInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ol_item_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&district_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&district_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewOrderInput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewOrderInput*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 district = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_district(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 customer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_customer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 order = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 ol_item = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_ol_item(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_ol_item();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewOrderInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewOrderInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 district = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_district(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &district_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 customer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_customer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_order(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ol_item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_ol_item())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ol_item())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewOrderInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewOrderInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewOrderInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewOrderInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 district = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->district(), output);
  }

  // optional int32 customer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->customer(), output);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // repeated int32 ol_item = 4;
  for (int i = 0, n = this->ol_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ol_item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewOrderInput)
}

::google::protobuf::uint8* NewOrderInput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewOrderInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 district = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->district(), target);
  }

  // optional int32 customer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->customer(), target);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  // repeated int32 ol_item = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->ol_item_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewOrderInput)
  return target;
}

size_t NewOrderInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewOrderInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ol_item = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ol_item_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ol_item_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 district = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->district());
    }

    // optional int32 customer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrderInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewOrderInput)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrderInput* source =
      ::google::protobuf::DynamicCastToGenerated<NewOrderInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewOrderInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewOrderInput)
    MergeFrom(*source);
  }
}

void NewOrderInput::MergeFrom(const NewOrderInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewOrderInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ol_item_.MergeFrom(from.ol_item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      district_ = from.district_;
    }
    if (cached_has_bits & 0x00000002u) {
      customer_ = from.customer_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewOrderInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewOrderInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrderInput::CopyFrom(const NewOrderInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewOrderInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrderInput::IsInitialized() const {
  return true;
}

void NewOrderInput::Swap(NewOrderInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewOrderInput::InternalSwap(NewOrderInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ol_item_.InternalSwap(&other->ol_item_);
  swap(district_, other->district_);
  swap(customer_, other->customer_);
  swap(order_, other->order_);
}

::google::protobuf::Metadata NewOrderInput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_tpcc_2eproto);
  return ::file_level_metadata_tpcc_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::NewOrderInput* Arena::CreateMaybeMessage< ::NewOrderInput >(Arena* arena) {
  return Arena::CreateInternal< ::NewOrderInput >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
