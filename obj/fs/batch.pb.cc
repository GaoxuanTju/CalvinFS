// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batch.proto

#include "batch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class BatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Batch> _instance;
} _Batch_default_instance_;
static void InitDefaultsBatch_batch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Batch_default_instance_;
    new (ptr) ::Batch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Batch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Batch_batch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatch_batch_2eproto}, {}};

void InitDefaults_batch_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Batch_batch_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_batch_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_batch_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_batch_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_batch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Batch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Batch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Batch, entries_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::Batch)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Batch_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_batch_2eproto = {
  {}, AddDescriptors_batch_2eproto, "batch.proto", schemas,
  file_default_instances, TableStruct_batch_2eproto::offsets,
  file_level_metadata_batch_2eproto, 1, file_level_enum_descriptors_batch_2eproto, file_level_service_descriptors_batch_2eproto,
};

const char descriptor_table_protodef_batch_2eproto[] =
  "\n\013batch.proto\"\030\n\005Batch\022\017\n\007entries\030\001 \003(\014"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_batch_2eproto = {
  false, InitDefaults_batch_2eproto, 
  descriptor_table_protodef_batch_2eproto,
  "batch.proto", &assign_descriptors_table_batch_2eproto, 39,
};

void AddDescriptors_batch_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_batch_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_batch_2eproto = []() { AddDescriptors_batch_2eproto(); return true; }();

// ===================================================================

void Batch::InitAsDefaultInstance() {
}
class Batch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Batch::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Batch::Batch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Batch)
}
Batch::Batch(const Batch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Batch)
}

void Batch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Batch_batch_2eproto.base);
}

Batch::~Batch() {
  // @@protoc_insertion_point(destructor:Batch)
  SharedDtor();
}

void Batch::SharedDtor() {
}

void Batch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Batch& Batch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Batch_batch_2eproto.base);
  return *internal_default_instance();
}


void Batch::Clear() {
// @@protoc_insertion_point(message_clear_start:Batch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Batch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Batch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes entries = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_entries();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Batch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Batch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Batch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Batch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes entries = 1;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Batch)
}

::google::protobuf::uint8* Batch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Batch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes entries = 1;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->entries(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Batch)
  return target;
}

size_t Batch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Batch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes entries = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entries_size());
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->entries(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Batch)
  GOOGLE_DCHECK_NE(&from, this);
  const Batch* source =
      ::google::protobuf::DynamicCastToGenerated<Batch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Batch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Batch)
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Batch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Batch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {
  return true;
}

void Batch::Swap(Batch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Batch::InternalSwap(Batch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(CastToBase(&other->entries_));
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_batch_2eproto);
  return ::file_level_metadata_batch_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Batch* Arena::CreateMaybeMessage< ::Batch >(Arena* arena) {
  return Arena::CreateInternal< ::Batch >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
